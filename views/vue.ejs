<!DOCTYPE html>
<html lang="en">
 <head>
  <title>myapp</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <link href="/components/bootstrap/dist/css/bootstrap.css" rel="stylesheet" type="text/css" /> 
  <link href="/components/bootstrap/dist/css/bootstrap-theme.css" rel="stylesheet" type="text/css" /> 

 
   <style>
body {
  font-family: 'myriad pro', sans-serif;
  font-size: 20px;
  border: 0;
}
todo {
  display: block;
  max-width: 400px;
  margin: 5% auto;
}
form input {
  font-size: 85%;
  padding: .4em;
  border: 1px solid #ccc;
  border-radius: 2px;
}
button {
  background-color: #1FADC5;
  border: 1px solid rgba(0,0,0,.2);
  font-size: 75%;
  color: #fff;
  padding: .4em 1.2em;
  border-radius: 2em;
  cursor: pointer;
  margin: 0 .23em;
  outline: none;
}
button[disabled] {
  background-color: #ddd;
  color: #aaa;
}
ul {
  padding: 0;
}
li {
  list-style-type: none;
  padding: .2em 0;
}
.completed {
  text-decoration: line-through;
  color: #ccc;
}
label {
  cursor: pointer;
}
<<<<<<< HEAD

.fade-enter-active, .fade-leave-active {
  transition: opacity .5s
}
.fade-enter, .fade-leave-active {
  opacity: 0
}

=======
>>>>>>> 8260c0ca95b185156d92076e1bff138a83694fbe
  </style>
 </head>
 <body>



 
<div id="app-5">

 <my-tag v-bind:btn='message' v-model='message'></my-tag>
 <transition name="fade">
 <p>{{ message }}</p>
 </transition>

 <input v-model="message">
  <button v-on:click="reverseMessage">Reverse Message</button>
    <ul id="example-1">
	  <li v-for="item in items ">
		{{ item.customerId }}
	  </li>
	</ul>
</div>

<!-- <inner-tag/> is specified on external file -->

<script type="text/javascript" src="/components/vue/dist/vue.min.js"></script>
<!-- <script type="text/javascript" src="/components/vue/dist/vue.runtime.min.js"></script> -->
<script type="text/javascript" src="/components/vue-resource/dist/vue-resource.min.js"></script>

 <script type="text/x-template" id="mytemplate">
    <span>111111{{ btn }}
	<input  ref='input' v-bind:style='{ color: \"red\" }'  v-model:btn='btn'  v-focus v-on:input='increment($event.target.value)'/></span>
</script>

<script language="javascript">
		
	Vue.directive('focus', {
	  // 当绑定元素插入到 DOM 中。
	  inserted: function (el) {
		// 聚焦元素
		el.focus();
	  }
	});
	
	Vue.component('commonp-tag', {
	    template: '<span>{{ childMessage }}</span>',
		data:function () {
		  return {
		          childMessage: 'child oK'
		         };
		}
	})
	
	Vue.component('async-component', function (resolve, reject) {
      vue.$http.get('async-component.html', function(data, status, request){
        var parser = new DOMParser();
        var doc = parser.parseFromString(data, "text/html");
        resolve({
            template: doc
        });
      });
	});

	var Child = {
	    template: "<span>111111{{ btn }}<input  ref='input' v-bind:style='{ color: \"red\" }'  v-model:btn='btn'  v-focus v-on:input='increment($event.target.value)'/></span>",
		//template:'#mytemplate',
		props:{'btn':{
					  type: String,
					  default: 100
					}},

		data:function () {
		  return {
		          childMessage: 'child oK'
		         };
		},

		methods: { 
			increment: function (val) {
			   console.info(val);
			   this.$emit('input', val)
			},		
            findParent: function (value) { 
/*			
                console.log(this.$parent);  //访问根组件  
                console.log(this.$parent.val);  //访问根组件的val属性  
                console.log(this.$parent.$children.indexOf(this));  //查看当前能否在其父组件的子组件中找到索引  
                console.log(this.$parent === this.$root);   //查看父组件和根组件是不是全等的（因为他的父组件就是根组件） 
*/				
            }  
        }  
	}
	var app5 = new Vue({
	  el: '#app-5',
	  data: {
		message: 'Hello Vue.js!',
        items:[ ]		
	  },
      components: {
		// <my-component> 将只在父模板可用		
		'my-tag': Child
	  },
	  created: function () {
		    var vm = this			
			//vm.items = 'Thinking...';		  
		    this.$http.jsonp('http://211.149.193.19:8080/api/customers',{ dataType:"jsonp"}).then((response) => {
				// success callback
				vm.items=(response.data);
				console.info("loadAjax");
			  }, (response) => {
				return [];
			});   
	  },
	  watch: {
		// 如果 question 发生改变，这个函数就会运行
		 items:function(){
		   // console.info(999);
		 }
	  },
	  compiled: function(){
        setTimeout(function(){
		  this.loaded = true;
		}.bind(this), 1000);
      },
	  mounted : function() {
		console.info("mounted ");
	  },
	  methods: {
	    ajaxData:function () {
			
		},
		reverseMessage: function () {
			//for(var k=0 ;k<1000;k++){
			  this.items.push({"customerId": k});
			//}			
		  //this.message = this.message.split('').reverse().join('')		  
		}
	  }
	})
</script>

 </body>
</html>
